#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–∞–π—Ç–∞ –ö—É–¥–æ –°–∫–∞–ª–∞
–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç JPEG/PNG –≤ WebP —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
"""

import os
import sys
from PIL import Image
import glob

def optimize_image(input_path, output_path, quality=85, max_width=1920):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:
    - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ WebP
    - –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    - –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∂–∞—Ç–∏–µ
    """
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with Image.open(input_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é)
            if img.mode in ('RGBA', 'LA', 'P'):
                # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                background = Image.new('RGB', img.size, (255, 255, 255))
                if img.mode == 'P':
                    img = img.convert('RGBA')
                background.paste(img, mask=img.split()[-1] if img.mode == 'RGBA' else None)
                img = background
            elif img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
            if img.width > max_width:
                ratio = max_width / img.width
                new_height = int(img.height * ratio)
                img = img.resize((max_width, new_height), Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ WebP
            img.save(output_path, 'WebP', quality=quality, optimize=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
            original_size = os.path.getsize(input_path)
            new_size = os.path.getsize(output_path)
            savings = ((original_size - new_size) / original_size) * 100
            
            print(f"‚úì {os.path.basename(input_path)}: {original_size//1024}KB ‚Üí {new_size//1024}KB ({savings:.1f}% —ç–∫–æ–Ω–æ–º–∏–∏)")
            
            return True
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {input_path}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üñºÔ∏è  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–∞–π—Ç–∞ –ö—É–¥–æ –°–∫–∞–ª–∞")
    print("=" * 50)
    
    # –ü–∞–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    folders = [
        "foto",
        "sorevnovaniya/pskov_okt_2025",
        "sorevnovaniya/vyborg_sent_2025"
    ]
    
    total_processed = 0
    total_savings = 0
    
    for folder in folders:
        if not os.path.exists(folder):
            print(f"‚ö†Ô∏è  –ü–∞–ø–∫–∞ {folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
            
        print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫—É: {folder}")
        
        # –ò—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        patterns = ['*.jpg', '*.jpeg', '*.png']
        images = []
        for pattern in patterns:
            images.extend(glob.glob(os.path.join(folder, pattern)))
        
        if not images:
            print("  –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            continue
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è WebP –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        webp_folder = f"{folder}_webp"
        os.makedirs(webp_folder, exist_ok=True)
        
        for img_path in images:
            filename = os.path.basename(img_path)
            name, ext = os.path.splitext(filename)
            webp_path = os.path.join(webp_folder, f"{name}.webp")
            
            if optimize_image(img_path, webp_path):
                total_processed += 1
    
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_processed}")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ WebP —Ñ–∞–π–ª–æ–≤")
    print("2. –û–±–Ω–æ–≤–∏—Ç–µ HTML –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebP")
    print("3. –î–æ–±–∞–≤—å—Ç–µ fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã")

if __name__ == "__main__":
    main()
